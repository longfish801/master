/*
 * build.gradle
 *
 * Copyright (C) jp.coocan.cute.longfish All Rights Reserved.
 */

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.ListBranchCommand.ListMode;
import org.eclipse.jgit.lib.RepositoryBuilder;
import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.RefSpec;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;

String GITHUB_USER = 'longfish801';
String GITHUB_REMOTE_REPO = 'origin';


// 環境変数から GitHubアカウントのパスワードを参照します
Closure getPassword = {
	String password = java.lang.System.getenv()['GITHUB_PWD'];
	if (password == null) throw new IllegalStateException('環境変数にGitHubアカウントのパスワードが設定されていません。');
	return password;
}

// Gitインスタンスを返す
Closure getGit = { def project ->
	def git = null;
	try {
		def repos = new RepositoryBuilder().setGitDir(new File(project.projectDir, '.git')).setWorkTree(project.projectDir).readEnvironment().build();
		git = new Git(repos);
	} catch (exc){
		exc.printStackTrace();
		throw exc;
	}
	return git;
}

// ローカルの内容をリモートリポジトリに反映します
Closure doPush = { def project, String branchName, String comment ->
	try {
		doPull(project, branchName);
		def git = getGit.call(project);
		if (git.status().call().isClean()){
			println "no push for ${project.name}";
		} else {
			// git add .
			git.add().addFilepattern('.').call();
			// git commit -m "[comment]"
			git.commit().setAll(true).setMessage(comment).call();
			// git push origin master
			CredentialsProvider cp = new UsernamePasswordCredentialsProvider(GITHUB_USER, getPassword.call());
			git.push().setCredentialsProvider(cp).setRemote(GITHUB_REMOTE_REPO).setRefSpecs(new RefSpec("${branchName}:${branchName}")).call();
			repos.close();
			println "pushed ${project.name}";
		}
	} catch (exc){
		exc.printStackTrace();
		throw exc;
	}
}

// リモートリポジトリの内容をローカルへ反映します
Closure doPull = { def project, String branchName ->
	try {
		// ブランチの一覧を取得し、currentブランチが checkoutされているか確認する
		def git = getGit.call(project);
		if (git.branchList().setListMode(ListMode.ALL).call().find { it.name == branchName } == null){
			throw new IllegalStateException("currentブランチがcheckoutされていません。 project.name=${project.name}");
		}
		
		// currentブランチに切り替えて、リモートリポジトリの内容を反映する
		git.checkout().setName(branchName).call();
		git.pull().call();
		repos.close();
	} catch (exc){
		exc.printStackTrace();
		throw exc;
	}
}

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201705170830-rc1' }
}

subprojects {
	defaultTasks 'clean', 'test';
	
	tasks.withType(AbstractCompile).each { it.options.encoding = 'UTF-8' }
	tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = 'UTF-8' }
	tasks.withType(Javadoc).each { it.options.encoding = 'UTF-8' }
	
	apply plugin: 'maven'
	apply plugin: 'groovy'
	
	group = 'io.github.longfish801';
	
	repositories {
		mavenCentral();
		maven { url 'https://longfish801.github.io/maven/' }
	}
	
	uploadArchives {
		repositories { mavenDeployer { repository(url: uri('../longfish801.github.io/maven')) } }
	}
	
	test {
		systemProperty 'file.encoding', 'UTF-8';
		minHeapSize = '128m';
		maxHeapSize = '1024m';
	}
	
	// ドキュメント生成関連のタスクです
	Map extLinks = [	// 外部参照先URLリスト
		'http://docs.oracle.com/javase/8/docs/api/' : 'java.,javax.,org.xml.',
		'http://groovy.codehaus.org/api/' : 'groovy.,org.codehaus.groovy.'
	];
	task deleteDoc(type: Delete){
		delete "../longfish801.github.io/${project.name}/groovydoc";
	}
	groovydoc {
		overviewText resources.text.fromFile('src/main/resources/overview.html');
		extLinks.each { link(it.key, it.value); };
	}
	task doc(type: Copy, dependsOn: [deleteDoc, groovydoc]){
		from 'build/docs';
		into "../longfish801.github.io/${project.name}";
	}
	
	// バージョンアップのためのタスクです
	task versionup(dependsOn: [uploadArchives, doc]){
		doLast {
			println "version: ${version}"
			
			// リモートリポジトリに変更を反映します
			String password = getPassword.call();
			try {
				doPush(GITHUB_USER, password, project.name, project.projectDir, "${project.name} ${version}");
				doPush(GITHUB_USER, password, project(':longfish801.github.io').name, project(':longfish801.github.io').projectDir, "${project.name} ${version}");
			} catch (exc){
				exc.printStackTrace();
				throw exc;
			}
		}
	}
}

allprojects {
	// GitHub関連のタスクです
	task push;
	push.doLast {
		String password = getPassword.call();
		try {
			doPush(GITHUB_USER, password, project.name, project.projectDir, "tmp ${project.name} ${new Date().format('yyyyMMdd_HHmm')}");
		} catch (exc){
			exc.printStackTrace();
			throw exc;
		}
	}
	
	task pull;
	pull.doLast {
		// リポジトリのインスタンスを作成します
		def repos = new RepositoryBuilder().setGitDir(new File(project.projectDir, '.git')).setWorkTree(project.projectDir).readEnvironment().build();
		def git = new Git(repos);
		
		// ブランチの一覧を取得し、currentブランチが checkoutされているか確認する
		if (git.branchList().setListMode(ListMode.ALL).call().find { it.name == 'current' } == null){
			throw new IllegalStateException("currentブランチがcheckoutされていません。 project.name=${project.name}");
		}
		
		// currentブランチに切り替えて、リモートリポジトリの内容を反映する
		git.checkout().setName('current').call();
		git.pull().call();
		repos.close();
		println "pulled ${project.name}";
	}
}
