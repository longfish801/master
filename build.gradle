/*
 * build.gradle
 *
 * Copyright (C) jp.coocan.cute.longfish All Rights Reserved.
 */

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.CreateBranchCommand;
import org.eclipse.jgit.api.ListBranchCommand.ListMode;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.RepositoryBuilder;
import org.eclipse.jgit.merge.MergeStrategy;
import org.eclipse.jgit.transport.CredentialsProvider;
import org.eclipse.jgit.transport.RefSpec;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.gradle.api.Project;

/**
 * Gradleプロジェクト毎のGit操作をします。
 * @version 1.0.00 2018/06/27
 * @author io.github.longfish801
 */
class GitHandler {
	/** GitHubユーザアカウント */
	static String GITHUB_ACCOUNT = 'longfish801';
	/** リモートリポジトリ名 */
	static String REMOTE_REPONAME = 'origin';
	/** Project */
	Project project = null;
	/** Repository */
	Repository repos = null;
	/** Git */
	Git git = null;
	
	/**
	 * コンストラクタ
	 * @param project Project
	 */
	GitHandler(Project project){
		this.project = project;
		try {
			repos = new RepositoryBuilder().setGitDir(new File(project.projectDir, '.git')).setWorkTree(project.projectDir).readEnvironment().build();
			git = new Git(repos);
		} catch (exc){
			exc.printStackTrace();
			throw exc;
		}
	}
	
	/**
	 * 環境変数GITHUB_PWDからGitHubアカウントのパスワードを参照します。
	 * @return パスワード
	 */
	String referPassword(){
		String password = java.lang.System.getenv()['GITHUB_PWD'];
		if (password == null) throw new IllegalStateException('環境変数にGitHubアカウントのパスワードが設定されていません。');
		return password;
	}
	
	/**
	 * ローカルリポジトリの内容をリモートリポジトリにアップロードします。
	 * @param branchName ブランチ名
	 * @param comment コミット時のコメント
	 */
	void doPush(String branchName, String comment){
		try {
			if (git.status().call().isClean()){	// ローカルでの編集がなければ、なにもしません
				println "no push ${project.name} for ${branchName}";
			} else {
				// git add .
				git.add().addFilepattern('.').call();
				// git commit -m "[comment]"
				git.commit().setAll(true).setMessage(comment).call();
				// git push origin master
				CredentialsProvider credentials = new UsernamePasswordCredentialsProvider(GITHUB_ACCOUNT, referPassword());
				git.push().setCredentialsProvider(credentials).setRemote(REMOTE_REPONAME).setRefSpecs(new RefSpec("${branchName}:${branchName}")).call();
				println "pushed ${project.name} for ${branchName}";
			}
		} catch (exc){
			exc.printStackTrace();
			throw exc;
		}
	}
	
	/**
	 * リモートリポジトリの内容をローカルへダウンロードします。<br>
	 * 事前に、対象リポジトリをローカルへ checkoutしておいてください。
	 * @param branchName ブランチ名
	 */
	void doPull(String branchName){
		try {
			// ブランチの一覧を取得し、ブランチが checkoutされているか確認する
			if (git.branchList().setListMode(ListMode.ALL).call().find { it.name == "refs/heads/${branchName}" } == null){
				// ブランチを checkoutする
				git.checkout().setCreateBranch(true).setName(branchName)
					.setUpstreamMode(CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)
					.setStartPoint("origin/${branchName}").call();
				println "checkout ${project.name} for ${branchName}";
			} else {
				// 指定されたブランチに切り替えて、リモートリポジトリの内容を反映する
				git.checkout().setName(branchName).call();
				git.pull().setStrategy(MergeStrategy.THEIRS).call();
				println "pulled ${project.name} for ${branchName}";
			}
		} catch (exc){
			exc.printStackTrace();
			throw exc;
		}
	}
}

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:5.0.2.201807311906-r' }
}

subprojects {
	defaultTasks 'clean', 'test';
	
	tasks.withType(AbstractCompile).each { it.options.encoding = 'UTF-8' }
	tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = 'UTF-8' }
	tasks.withType(Javadoc).each { it.options.encoding = 'UTF-8' }
	
	apply plugin: 'maven'
	apply plugin: 'groovy'
	
	group = 'io.github.longfish801';
	
	repositories {
		mavenCentral();
		maven { url 'https://longfish801.github.io/maven/' }
	}
	
	test {
		systemProperty 'file.encoding', 'UTF-8';
		minHeapSize = '128m';
		maxHeapSize = '1024m';
	}
	
	// MavenリポジトリにJARファイルを格納します
	uploadArchives {
		repositories { mavenDeployer { repository(url: uri('../longfish801.github.io/maven')) } }
	}
	
	// APIドキュメント生成関連のタスクです
	Map extLinks = [	// 外部参照先URLリスト
		'http://docs.oracle.com/javase/8/docs/api/' : 'java.,javax.,org.xml.',
		'http://groovy.codehaus.org/api/' : 'groovy.,org.codehaus.groovy.'
	];
	task deleteDoc(type: Delete){
		delete "../longfish801.github.io/gitdoc/${project.name}/groovydoc";
	}
	groovydoc {
		overviewText resources.text.fromFile('src/main/resources/overview.html');
		extLinks.each { link(it.key, it.value); };
	}
	task doc(type: Copy, dependsOn: [deleteDoc, groovydoc]){
		from 'build/docs';
		into "../longfish801.github.io/gitdoc/${project.name}";
	}
	
	// 外部から参照可能にするためのタスクです
	// MavenリポジトリへのJARファイル格納と APIドキュメント生成を実施します
	task release(dependsOn: [uploadArchives, doc]){
		doLast { println "version: ${version}" }
	}
}

allprojects {
	// すべてのプロジェクトについて、ローカルの currentブランチの内容をリモートへ反映します
	task push;
	push.doLast {
		new GitHandler(project).doPush('current', "tmp ${project.name} ${new Date().format('yyyyMMdd_HHmm')}");
	}
	
	// すべてのプロジェクトについて、リモートから currentブランチの内容をローカルへ反映します
	task pull;
	pull.doLast {
		new GitHandler(project).doPull('current');
	}
}
